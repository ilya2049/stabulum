// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"net/http"
	product2 "stabulum/internal/app/product"
	product4 "stabulum/internal/domain/product"
	mocks2 "stabulum/internal/domain/product/mocks"
	"stabulum/internal/infrastructure/api/router"
	product3 "stabulum/internal/infrastructure/api/router/product"
	"stabulum/internal/infrastructure/config"
	"stabulum/internal/infrastructure/httpserver"
	"stabulum/internal/infrastructure/postgres"
	"stabulum/internal/infrastructure/postgres/product"
	"stabulum/internal/testfixture/mocks"
)

// Injectors from wire.go:

func NewContainer(cfg config.Config) (*Container, func(), error) {
	httpserverConfig := config.NewHTTPServerConfig(cfg)
	usecasesConfig := config.NewUsecasesConfig(cfg)
	connection, cleanup, err := postgres.NewConnection()
	if err != nil {
		return nil, nil, err
	}
	repository := product.NewRepository(connection)
	usecases := product2.NewUsecases(usecasesConfig, repository)
	handler := product3.NewHandler(usecases)
	engine := router.New(handler)
	server := httpserver.New(httpserverConfig, engine)
	container := newContainer(server)
	return container, func() {
		cleanup()
	}, nil
}

func NewTestContainer(cfg config.Config, mockCfg mocks.Config) *TestContainer {
	usecasesConfig := config.NewUsecasesConfig(cfg)
	repository := mocks.NewProductRepositoryMock(mockCfg)
	usecases := product2.NewUsecases(usecasesConfig, repository)
	handler := product3.NewHandler(usecases)
	engine := router.New(handler)
	server := httpserver.NewTestServer(engine)
	testContainer := newTestContainer(server)
	return testContainer
}

// wire.go:

var appSet = wire.NewSet(
	configSet,

	apiSet, product2.NewUsecases,
)

var configSet = wire.NewSet(config.NewUsecasesConfig, config.NewHTTPServerConfig)

var apiSet = wire.NewSet(wire.Bind(new(http.Handler), new(*gin.Engine)), httpserver.New, router.New, product3.NewHandler)

var productionDependenciesSet = wire.NewSet(
	newContainer,

	productPostgresRepositorySet,
)

var productPostgresRepositorySet = wire.NewSet(postgres.NewConnection, wire.Bind(new(product4.Repository), new(*product.Repository)), product.NewRepository)

var testDependenciesSet = wire.NewSet(
	newTestContainer, httpserver.NewTestServer, productMockRepositorySet,
)

var productMockRepositorySet = wire.NewSet(wire.Bind(new(product4.Repository), new(*mocks2.Repository)), mocks.NewProductRepositoryMock)
